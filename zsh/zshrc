#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

#
# Browser
#

if [[ "$OSTYPE" == darwin* ]]; then
  export BROWSER='open'
fi

#
# Editors
#

export EDITOR='vim'
export VISUAL='vim'
export PAGER='less'

#
# Language
#

if [[ -z "$LANG" ]]; then
  export LANG='en_US.UTF-8'
fi

#
# Paths
#

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

# Set the list of directories that cd searches.
# cdpath=(
#   $cdpath
# )

# Set the list of directories that Zsh searches for programs.
path=(
  /usr/local/{bin,sbin}
  $path
)

#
# Less
#

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi


#
# alias
#
alias dc='docker-compose'
alias gs='git status'
alias gc='git commit'
alias curl_header='curl -D - -s -o /dev/null'
alias curl_time='curl -o /dev/null -s -w  "Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n"'
alias getip='curl ifconfig.me'
alias getip-all='curl ifconfig.me/all'
alias getip-json='curl ifconfig.me/all.json'
alias tu='timer -s -u'

alias compress-pdf='command gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf'
alias flutter-dev-tool='flutter packages pub global run devtools'
alias clion='open -a /Applications/Clion.app'
alias pycharm='open -a /Applications/PyCharm.app'

#
# functions
#

# mkdircd - mkdir then cd
mkdircd() {
    mkdir $1
    cd $1
}

# vimcp - edit file with vim and copy it
vimcp() {
    vim $1
    if [ -e $1 ];  then
        cat $1 | pbcopy
    else
        return 1
    fi
}

# pdfmin - Compress PDF
pdfmin() {
    if [ -z "$(command command -v gs)" ]; then
        echo "Ghostscript not installed."
        return 1
    fi
    if [ ! -e "$1" ]; then
        echo "File not spqcified."
        return 2
    fi
    command gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.6 -dPDFSETTINGS=/ebook \
    -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$1.min.pdf" "$1"
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | grep -v -e "^.$" | fzf --exit-0 +m --ansi --preview-window=bottom:10 --preview 'ls -A {} | head -200') && cd "$dir"
}

# fd1 - cd to selected directory directory under current
fd1() {
  local dir
  dir=$(find ${1:-.} -maxdepth 1 -type d 2> /dev/null | grep -v -e "^.$" | fzf --exit-0 +m --ansi --preview-window=bottom:10 --preview 'ls -A {} | head -200') && cd "$dir"
}

# fo - open or edit a file.
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  IFS=$'\n' out=("$(fzf --query="$1" --exit-0 --expect=ctrl-o,ctrl-e --preview-window=bottom:15 --preview "head -200 {}" --header "ctrl-o to open with open command, enter to open with $EDITOR")")
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# fkill - kill process
fkill() {
  local pid options
  options="$@"
  pid=$(ps aux | sed 1d | fzf --reverse -m --prompt "kill $options >" | awk '{print $2}')
  if [ -n $pid ]; then
    kill $@ "$pid"
  fi
}

# Compile and run a single c++ file.
cpprun() {
    TEMP="/tmp/$RANDOM"
    if [ -n "$Boost_INCLUDE_DIRS" ]; then
        g++-9 -o "$TEMP" -std=c++17 -I "$Boost_INCLUDE_DIRS" $@ && "$TEMP"
    else
        g++-9 -o "$TEMP" -std=c++17 $@ && "$TEMP"
    fi
    rm -f "$TEMP"
}

# Print color list to terminal
lscolor() {
    echo -n "Kind "
    for i (`seq 1 9`) echo -n "\e[${i}m\\\\e[${i}m\e[0m  "
    echo -n "\n"
    echo -n "Fg   "
    for i (`seq 30 37`) echo -n "\e[${i}m\\\\e[${i}m\e[0m "
    echo -n "\n"
    echo -n "Bg   "
    for i (`seq 40 47`) echo -n "\e[${i}m\\\\e[${i}m\e[0m "
    echo "\n"
    echo "256 Colors"
    for j (`seq 0 31`); do
        for i (`seq $((8  * $j)) $((8 * $j + 7))`); do
            printf "\e[48;5;${i}m%03d\e[0m " $i
            printf "\e[38;5;${i}m%03d\e[0m " $i
        done
        echo -n "\n"
    done
}

setopt nonomatch

# Auto suggestions of command
source ~/.dotfiles/zsh/zsh-autosuggestions.zsh

# fzf completion
source ~/.dotfiles/zsh/fzf-completion.zsh
source ~/.dotfiles/zsh/fzf-key-bindings.zsh
export FZF_COMPLETION_TRIGGER='**'
export FZF_DEFAULT_COMMAND='ls -a -1'


# keybind
# bind ^L^L clear and tmux clear
function _clear() { clear; [[ -n "$TMUX" ]] && tmux clear; zle reset-prompt; }
zle -N _clear
bindkey "^L^L" _clear

# スペースで区切られた単語を移動
bindkey "^S" vi-backward-blank-word
bindkey "^F" vi-forward-blank-word

bindkey "^V" edit-command-line

# Pyenv init must be excutated after setting PATH
if [ -n "$(command -v pyenv)" ]; then
  eval "$(pyenv init -)"
fi

# zsh-syntax-highlighting must be after all zle modules
source ~/.dotfiles/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
